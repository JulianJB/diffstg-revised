{'PATH_MOD': '/home/ec2-user/SageMaker/output/HAR_forearm/model/', 'PATH_LOG': '/home/ec2-user/SageMaker/output/HAR_forearm/log/', 'PATH_IMPUTATION': '/home/ec2-user/SageMaker/output/HAR_forearm/imputations/', 'data': {'name': 'HAR', 'path': '/home/ec2-user/SageMaker/data/dataset/', 'feature_file': '/home/ec2-user/SageMaker/data/dataset/HAR/raw_train_data_forearm.npy', 'spatial': '/home/ec2-user/SageMaker/data/dataset/HAR/adj.npy', 'num_recent': 1, 'num_features': 3, 'num_vertices': 7}, 'model': {'T_h': 128, 'T_p': 0, 'V': 7, 'F': 3, 'device': device(type='cuda'), 'd_h': 32, 'N': 200, 'sample_steps': 200, 'epsilon_theta': 'UGnet', 'is_label_condition': True, 'beta_end': 0.1, 'beta_schedule': 'quad', 'sample_strategy': 'ddpm', 'channel_multipliers': [1, 2], 'supports_len': 2, 'C': 32, 'n_channels': 32}, 'evaluation': {'val_sample_steps': 20, 'val_sample_strategy': 'ddim_multi'}, 'n_samples': 8, 'model_name': 'DiffSTG', 'is_test': False, 'epoch': 20, 'optimizer': 'adam', 'lr': 0.002, 'batch_size': 16, 'wd': 1e-05, 'early_stop': 5, 'start_epoch': 0, 'device': device(type='cuda'), 'logger': <utils.common_utils.Logger object at 0x7fcbe1e20460>, 'nni': False, 'mask_ratio': 0.0, 'T_h': 128, 'T_p': 0, 'trial_name': 'UGnet+32+200+quad+0.1+200+ddpm+128+8+True+HAR+0.0+False+False+0.002+16', 'log_path': '/home/ec2-user/SageMaker/output/HAR_forearm/log//UGnet+32+200+quad+0.1+200+ddpm+128+8+True+HAR+0.0+False+False+0.002+16.log'}
imputation_path directory:/home/ec2-user/SageMaker/output/HAR_forearm/imputations/
model path:/home/ec2-user/SageMaker/output/HAR_forearm/model/UGnet+32+200+quad+0.1+200+ddpm+128+8+True+HAR+0.0+False+False+0.002+16N-200+T_h-128+T_p-0+epsilon_theta-UGnet.dm4stg
imputation_path:/home/ec2-user/SageMaker/output/HAR_forearm/model/UGnet+32+200+quad+0.1+200+ddpm+128+8+True+HAR+0.0+False+False+0.002+16N-200+T_h-128+T_p-0+epsilon_theta-UGnet.dm4stg
DiffSTG(
  (eps_model): UGnet(
    (down): ModuleList(
      (0-1): 2 x DownBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Identity()
          (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 32), eps=1e-05, elementwise_affine=True)
        )
      )
      (2): Downsample(
        (conv): Conv2d(32, 32, kernel_size=(1, 3), stride=(1, 2), padding=(0, 1))
      )
      (3): DownBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
            (shortcut): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 64), eps=1e-05, elementwise_affine=True)
        )
      )
      (4): DownBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Identity()
          (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 64), eps=1e-05, elementwise_affine=True)
        )
      )
    )
    (middle): MiddleBlock(
      (res1): ResidualBlock(
        (tcn1): TcnBlock(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
          (chomp): Chomp()
          (drop): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (1): Chomp()
            (2): Dropout(p=0.0, inplace=False)
          )
        )
        (tcn2): TcnBlock(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
          (chomp): Chomp()
          (drop): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (1): Chomp()
            (2): Dropout(p=0.0, inplace=False)
          )
        )
        (shortcut): Identity()
        (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        (spatial): SpatialBlock()
        (norm): LayerNorm((7, 64), eps=1e-05, elementwise_affine=True)
      )
      (res2): ResidualBlock(
        (tcn1): TcnBlock(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
          (chomp): Chomp()
          (drop): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (1): Chomp()
            (2): Dropout(p=0.0, inplace=False)
          )
        )
        (tcn2): TcnBlock(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
          (chomp): Chomp()
          (drop): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (1): Chomp()
            (2): Dropout(p=0.0, inplace=False)
          )
        )
        (shortcut): Identity()
        (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        (spatial): SpatialBlock()
        (norm): LayerNorm((7, 64), eps=1e-05, elementwise_affine=True)
      )
    )
    (up): ModuleList(
      (0-1): 2 x UpBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
            (shortcut): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 64), eps=1e-05, elementwise_affine=True)
        )
      )
      (2): UpBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
            (shortcut): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
          (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 32), eps=1e-05, elementwise_affine=True)
        )
      )
      (3): Upsample(
        (conv): ConvTranspose2d(32, 32, kernel_size=(1, 4), stride=(1, 2), padding=(0, 1))
      )
      (4-6): 3 x UpBlock(
        (res): ResidualBlock(
          (tcn1): TcnBlock(
            (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
            (shortcut): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          )
          (tcn2): TcnBlock(
            (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
            (chomp): Chomp()
            (drop): Dropout(p=0.0, inplace=False)
            (net): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
              (1): Chomp()
              (2): Dropout(p=0.0, inplace=False)
            )
          )
          (shortcut): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
          (spatial): SpatialBlock()
          (norm): LayerNorm((7, 32), eps=1e-05, elementwise_affine=True)
        )
      )
    )
    (x_proj): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
    (out): Sequential(
      (0): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
      (1): Linear(in_features=256, out_features=128, bias=True)
    )
  )
)Num_of_parameters:840867
      |  ---Train---   |   ----Validation---   | (Metrics over T_h window)
Epoch |   Loss  Time   |   MAE    RMSE   Time  |
   1.0    1.078  385.2s | 0.9561   2.8301   4832.4s
Total training time: 5233.49s
   2.0    0.775  368.8s | 0.9329   2.8101   4832.1s
Total training time: 10451.00s
   3.0    0.726  367.7s | 0.9104   2.8003   4823.3s
Total training time: 15658.32s
   4.0    0.701  367.4s | 0.9048   2.8011   4824.1s
Total training time: 20866.24s
   5.0    0.684  366.3s | 0.8975   2.8013   4820.5s
Total training time: 26069.28s
   6.0    0.672  365.1s | 0.8937   2.8026   4825.0s
Total training time: 31275.18s
   7.0    0.663  367.6s | 0.8907   2.8045   4825.1s
Total training time: 36484.66s
   8.0    0.655  367.8s | 0.8869   2.8043   4826.3s
Total training time: 41695.18s
   9.0    0.649  367.2s | 0.8862   2.8097   4821.3s
Total training time: 46900.22s
  10.0    0.643  367.2s | 0.8852   2.8163   4822.2s
Total training time: 52106.29s
  11.0    0.638  367.7s | 0.8865   2.8251   4817.8s
Total training time: 57308.34s
  12.0    0.633  367.1s | 0.8871   2.8367   4820.8s
Total training time: 62512.80s
  13.0    0.627  367.2s | 0.8908   2.8562   4823.2s
Total training time: 67719.73s
  14.0    0.621  367.6s | 0.8955   2.8776   4820.6s
Total training time: 72924.33s
  15.0    0.554  366.7s | 0.8714   2.9215   4825.3s
Total training time: 78132.56s
  16.0    0.549  366.1s | 0.8756   2.9388   4820.5s
Total training time: 83335.45s
  17.0    0.546  365.2s | 0.8792   2.9530   4822.5s
Total training time: 88539.33s
  18.0    0.544  365.3s | 0.8832   2.9697   4820.9s
Total training time: 93741.85s
  19.0    0.541  366.5s | 0.8868   2.9825   4822.8s
Total training time: 98947.60s
  20.0    0.530  366.2s | 0.8874   3.0080   4827.1s
Total training time: 104157.70s
sample_strategy: ddim_multi, sample_steps: 40
Final results in test: MAE: 0.8899    RMSE: 3.0159    MAPE: 127.0114  CRPS: 0.1200    MIS: 10.9471   | Best Epoch: 15   
